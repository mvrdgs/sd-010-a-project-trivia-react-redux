{"version":3,"sources":["trivia.png","services/fetchQuestion.js","services/fetchToken.js","reducers/gameData.js","actions/index.js","reducers/player.js","reducers/settings.js","reducers/index.js","store/index.js","components/Buttons/ButtonConfig.jsx","components/LoginForm.jsx","pages/Login.jsx","services/fetchCategories.js","pages/Settings.jsx","components/Buttons/NextQuestion.jsx","components/Questions.jsx","components/GameOperation.jsx","components/Header.jsx","pages/Game.jsx","components/Buttons/PlayAgain.jsx","components/Buttons/ShowRank.jsx","components/Buttons/DisplayPerformance.jsx","pages/FeedBack.jsx","pages/Ranking.jsx","serviceWorker.js","index.js","App.js"],"names":["module","exports","fetchQuestion","token","a","async","fetch","json","results","fetchToken","INTIAL_STATE","questions","isLoading","reducer","state","action","type","payload","name","assertions","score","gravatarEmail","picture","playerReducer","INITIAL_STATE","filter","settingsReducer","reducers","combineReducers","gameData","player","settings","store","createStore","composeWithDevTools","applyMiddleware","thunk","BtnConfig","props","handleClick","bind","this","history","push","data-testid","onClick","className","Component","LoginForm","handleInput","handleSubmit","getGravatarPicture","clearScoreRd","cryptoEmail","md5","toString","target","value","setState","event","preventDefault","requestToken","storePlayerInfo","htmlFor","id","onChange","autoComplete","regex","nameLength","match","length","disabled","src","logoLogin","alt","onSubmit","labelEmail","labelName","labelBtn","connect","dispatch","data","localStorage","setItem","Login","fetchCategories","triviaCategories","trivia_categories","Settings","fetchApi","handlesChange","values","map","item","Object","prevState","index","key","setFilter","categoryInput","difficulttInput","typeInput","filterQuest","NextQuestion","nextQuestion","hidden","Questions","selectAnswer","question","category","gameOn","shuffleAnswers","correctAnswer","parse","query","GameOperation","sortQuestions","runGame","saveAtLocalStorage","timeCounter","saveRankAtLocalStorage","difficulty","count","time","scoreMultiplicators","hard","medium","easy","saveNewPlayerRank","rankingStorage","JSON","getItem","stringify","timer","setInterval","clearInterval","redux","incrementScore","innerText","correct_answer","incorrectAnswer","incorrect_answers","sort","Math","random","Header","Game","setLocalStorage","requestQuestions","getQuestion","PlayAgain","ShowRank","DisplayPerformance","FeedBack","Ranking","playerRank","b","orderMyArray","to","Boolean","window","location","hostname","ReactDOM","render","path","component","exact","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ce24587a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/trivia.466d153e.png\";","export default async function fetchQuestion(token) {\n  const { results } = await (await fetch(`https://opentdb.com/api.php?amount=5&token=${token}`)).json();\n  return results;\n}\n","export default async function fetchToken() {\n  const { token } = await (await fetch('https://opentdb.com/api_token.php?command=request')).json();\n  return token;\n}\n","import { START_FETCH, FETCH_TOKEN_SUCCESS, FETCH_QUESTIONS_SUCCESS } from '../actions';\n\nconst INTIAL_STATE = {\n  token: '',\n  questions: [],\n  isLoading: true,\n};\n\nconst reducer = (state = INTIAL_STATE, action) => {\n  switch (action.type) {\n  case START_FETCH:\n    return { ...state, isLoading: true };\n  case FETCH_TOKEN_SUCCESS:\n    return { ...state, token: action.payload };\n  case FETCH_QUESTIONS_SUCCESS:\n    return { ...state, questions: action.payload, isLoading: false };\n  default:\n    return state;\n  }\n};\n\nexport default reducer;\n","import fetchQuestion from '../services/fetchQuestion';\nimport fetchToken from '../services/fetchToken';\n\nexport const START_FETCH = 'START_FETCH';\nexport const ADD_FILTER = 'ADD_FILTER';\nexport const ADD_PLAYER = 'ADD_PLAYER';\nexport const CLEAR_SCORE = 'CLEAR_SCORE';\nexport const FETCH_TOKEN_SUCCESS = 'FETCH_TOKEN_SUCCESS';\nexport const FETCH_QUESTIONS_SUCCESS = 'FETCH_QUESTIONS_SUCCESS';\nexport const REQUEST_TOKEN = 'REQUEST_TOKEN';\nexport const RIGHT_ANSWER = 'RIGHT_ANSWER';\n\nfunction startFetch() {\n  return { type: START_FETCH };\n}\n\nexport function addPlayer(payload) {\n  return {\n    type: ADD_PLAYER,\n    payload,\n  };\n}\n\nexport function addFilter(payload) {\n  return {\n    type: ADD_FILTER,\n    payload,\n  };\n}\n\nexport function rightAnswer(payload) {\n  return {\n    type: RIGHT_ANSWER,\n    payload,\n  };\n}\n\nexport function clearScore() {\n  return {\n    type: CLEAR_SCORE,\n  };\n}\n\nexport function fetchTokenSuccess(payload) {\n  return {\n    type: FETCH_TOKEN_SUCCESS,\n    payload,\n  };\n}\n\nexport function fetchQuestionsSuccess(payload) {\n  return {\n    type: FETCH_QUESTIONS_SUCCESS,\n    payload,\n  };\n}\n\nexport function getQuestion(token) {\n  return async (dispatch) => {\n    dispatch(startFetch());\n    const questions = await fetchQuestion(token);\n    dispatch(fetchQuestionsSuccess(questions));\n  };\n}\n\nexport function getToken() {\n  return async (dispatch) => {\n    dispatch(startFetch());\n    const token = await fetchToken();\n    dispatch(fetchTokenSuccess(token));\n    localStorage.setItem('token', token);\n  };\n}\n","import { ADD_PLAYER, CLEAR_SCORE, RIGHT_ANSWER } from '../actions';\n\nconst INTIAL_STATE = {\n  name: '',\n  assertions: 0,\n  score: 0,\n  gravatarEmail: '',\n  picture: 'https://www.gravatar.com/avatar/d41d8cd98f00b204e9800998ecf8427e',\n};\n\nconst playerReducer = (state = INTIAL_STATE, action) => {\n  switch (action.type) {\n  case ADD_PLAYER:\n    return { ...state, ...action.payload };\n  case RIGHT_ANSWER:\n    return { ...state,\n      assertions: state.assertions + 1,\n      score: state.score + action.payload };\n  case CLEAR_SCORE:\n    return { ...state,\n      assertions: 0,\n      score: 0,\n    };\n  default:\n    return state;\n  }\n};\n\nexport default playerReducer;\n","import { ADD_FILTER } from '../actions';\n\nconst INITIAL_STATE = {\n  filter: {},\n};\n\nconst settingsReducer = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n  case ADD_FILTER:\n    return { ...action.payload };\n  default:\n    return state;\n  }\n};\n\nexport default settingsReducer;\n","import { combineReducers } from 'redux';\nimport gameData from './gameData';\nimport player from './player';\nimport settings from './settings';\n\nconst reducers = combineReducers({\n  gameData,\n  player,\n  settings,\n});\n\nexport default reducers;\n","import { createStore, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\nimport reducer from '../reducers';\n\nconst store = createStore(\n  reducer,\n  composeWithDevTools(applyMiddleware(thunk)),\n);\n\nexport default store;\n","import React, { Component } from 'react';\nimport { object } from 'prop-types';\n\nclass BtnConfig extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  handleClick() {\n    const { history } = this.props;\n    history.push('/settings');\n  }\n\n  render() {\n    return (\n      <button\n        type=\"button\"\n        data-testid=\"btn-settings\"\n        onClick={ this.handleClick }\n        className=\"btnConfig\"\n      >\n        Configurações\n      </button>\n    );\n  }\n}\n\nBtnConfig.propTypes = {\n  history: object,\n}.isRiquered;\n\nexport default BtnConfig;\n","import React, { Component } from 'react';\nimport { string, func } from 'prop-types';\nimport { connect } from 'react-redux';\nimport md5 from 'crypto-js/md5';\nimport { getToken, addPlayer, clearScore } from '../actions';\nimport BtnConfig from './Buttons/ButtonConfig';\nimport '../styles/login.css';\nimport logoLogin from '../trivia.png';\n\nclass LoginForm extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleInput = this.handleInput.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.getGravatarPicture = this.getGravatarPicture.bind(this);\n\n    this.state = {\n      gravatarEmail: '',\n      name: '',\n    };\n  }\n\n  componentDidMount() {\n    const { clearScoreRd } = this.props;\n    clearScoreRd();\n  }\n\n  getGravatarPicture(gravatarEmail) {\n    const cryptoEmail = md5(gravatarEmail).toString();\n    const picture = `https://www.gravatar.com/avatar/${cryptoEmail}`;\n    return picture;\n  }\n\n  handleInput({ target }) {\n    const { value, name } = target;\n    this.setState({ [name]: value });\n  }\n\n  async handleSubmit(event) {\n    event.preventDefault();\n    const { gravatarEmail, name } = this.state;\n    const { requestToken, history, storePlayerInfo } = this.props;\n    await requestToken(this.state);\n    const picture = this.getGravatarPicture();\n    storePlayerInfo({ gravatarEmail, name, picture });\n    history.push('/game');\n  }\n\n  labelEmail(gravatarEmail) {\n    return (\n      <label htmlFor=\"input-gravatar-email\">\n        <span>\n          <strong>\n            Email\n          </strong>\n        </span>\n        <input\n          id=\"input-gravatar-email\"\n          name=\"gravatarEmail\"\n          onChange={ this.handleInput }\n          value={ gravatarEmail }\n          data-testid=\"input-gravatar-email\"\n          autoComplete=\"off\"\n        />\n      </label>\n    );\n  }\n\n  labelName(name) {\n    return (\n      <label htmlFor=\"input-player-name\">\n        <span>\n          <strong>\n            Name\n          </strong>\n        </span>\n        <input\n          id=\"input-player-name\"\n          name=\"name\"\n          onChange={ this.handleInput }\n          value={ name }\n          data-testid=\"input-player-name\"\n          autoComplete=\"off\"\n        />\n      </label>\n    );\n  }\n\n  labelBtn(regex, name, nameLength, gravatarEmail) {\n    return (\n      <input\n        type=\"submit\"\n        value=\"Play\"\n        data-testid=\"btn-play\"\n        className={\n          gravatarEmail.match(regex) && name.length > nameLength ? 'btnPlay' : ''\n        }\n        disabled={ !gravatarEmail.match(regex) || name.length <= nameLength }\n      />\n    );\n  }\n\n  render() {\n    const { name, gravatarEmail } = this.state;\n    const { history } = this.props;\n    const regex = /^\\w+([.-_]?\\w+)*@\\w+([.-_]?\\w+)*(\\.\\w{2,3})+$/;\n    const nameLength = 0;\n    return (\n      <div className=\"elements-content\">\n        <div className=\"img-content\">\n          <img src={ logoLogin } alt=\"logo-login\" />\n        </div>\n        <form onSubmit={ this.handleSubmit } className=\"form-content\">\n          <div className=\"inputs-content\">\n            { this.labelEmail(gravatarEmail) }\n            { this.labelName(name) }\n          </div>\n          <div className=\"btn-content\">\n            { this.labelBtn(regex, name, nameLength, gravatarEmail) }\n            <BtnConfig history={ history } />\n          </div>\n        </form>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  token: state.gameData.token,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  requestToken: (data) => dispatch(getToken(data)),\n  storePlayerInfo: (data) => dispatch(addPlayer(data)),\n  clearScoreRd: () => dispatch(clearScore()),\n});\n\nLoginForm.propTypes = {\n  token: string,\n  requestToken: func,\n}.isRequired;\n\nexport default connect(mapStateToProps, mapDispatchToProps)(LoginForm);\n","import React, { Component } from 'react';\nimport { object } from 'prop-types';\nimport LoginForm from '../components/LoginForm';\n\nclass Login extends Component {\n  render() {\n    const { history } = this.props;\n    return (\n      <div className=\"main-content\">\n        <LoginForm history={ history } />\n      </div>\n    );\n  }\n}\n\nLogin.propTypes = {\n  history: object,\n}.isRequired;\n\nexport default Login;\n","export default async function fetchCategories() {\n  const endPoint = 'https://opentdb.com/api_category.php';\n  const { trivia_categories: triviaCategories } = await (await fetch(endPoint)).json();\n  return triviaCategories;\n}\n","import React, { Component } from 'react';\nimport { object } from 'prop-types';\nimport '../styles/settings.css';\nimport { connect } from 'react-redux';\nimport { addFilter } from '../actions';\nimport fetchCategories from '../services/fetchCategories';\n\nclass Settings extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      data: [],\n      filter: {},\n    };\n\n    this.fetchApi = this.fetchApi.bind(this);\n    this.handlesChange = this.handlesChange.bind(this);\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  componentDidMount() {\n    this.fetchApi();\n  }\n\n  async fetchApi() {\n    const triviaCategories = await fetchCategories();\n    const values = triviaCategories.map((item) => Object.values(item)[1]);\n    this.setState({\n      data: values,\n    });\n  }\n\n  handlesChange({ target: { name, value } }) {\n    const { filter } = this.state;\n    this.setState((prevState) => ({\n      ...prevState,\n      filter: { ...filter, [name]: value },\n    }));\n  }\n\n  categoryInput() {\n    const { data } = this.state;\n    return (\n      <select name=\"category\" id=\"category\" onChange={ this.handlesChange }>\n        <option value=\"selecione-a-categ\">Selecione a Categoria</option>\n        { data.map((item, index) => (\n          <option value={ item } key={ index }>{item}</option>\n        ))}\n      </select>\n    );\n  }\n\n  difficulttInput() {\n    return (\n      <select name=\"difficult\" id=\"difficult\" onChange={ this.handlesChange }>\n        <option value=\"selecione-a-dific\">Selecione a dificuldade</option>\n        <option value=\"easy\">Easy</option>\n        <option value=\"medium\">Medium</option>\n        <option value=\"hard\">Hard</option>\n      </select>\n    );\n  }\n\n  typeInput() {\n    return (\n      <select name=\"type\" id=\"type\" onChange={ this.handlesChange }>\n        <option value=\"selecione-o-tipo\">Selecione o Tipo</option>\n        <option value=\"multiple-choice\">Multiple choice</option>\n        <option value=\"true-false\">True or False</option>\n      </select>\n    );\n  }\n\n  handleClick() {\n    const { history, setFilter } = this.props;\n    const { filter } = this.state;\n    setFilter(filter);\n    history.push('/');\n  }\n\n  render() {\n    return (\n      <div className=\"main-settings\">\n        <div data-testid=\"settings-title\" className=\"title-settings\">\n          <h1>Configurações</h1>\n        </div>\n        <form className=\"form-settings\">\n          { this.categoryInput() }\n          { this.difficulttInput() }\n          { this.typeInput() }\n        </form>\n        <button\n          type=\"button\"\n          className=\"btn-settings\"\n          onClick={ this.handleClick }\n        >\n          Logar\n        </button>\n      </div>\n    );\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => ({\n  setFilter: (filterQuest) => dispatch(addFilter(filterQuest)),\n});\n\nSettings.propTypes = {\n  history: object,\n}.isRiquered;\n\nexport default connect(null, mapDispatchToProps)(Settings);\n","import React, { Component } from 'react';\nimport { func } from 'prop-types';\n\nclass NextQuestion extends Component {\n  render() {\n    const { nextQuestion, hidden } = this.props;\n\n    return (\n      <button\n        type=\"button\"\n        hidden={ hidden }\n        className=\"btn-next-quest\"\n        data-testid=\"btn-next\"\n        onClick={ nextQuestion }\n      >\n        Próxima\n      </button>\n    );\n  }\n}\n\nNextQuestion.propTypes = {\n  nextQuestion: func,\n}.isRequired;\n\nexport default NextQuestion;\n","import React, { Component } from 'react';\nimport { shape, bool, string } from 'prop-types';\nimport parse from 'html-react-parser';\n\nclass Questions extends Component {\n  render() {\n    const { gameData, selectAnswer } = this.props;\n    const { question, category, gameOn, shuffleAnswers, correctAnswer } = gameData;\n    return (\n      <>\n        <div>\n          <h3 data-testid=\"question-category\">{category}</h3>\n          <p data-testid=\"question-text\">{parse(question)}</p>\n        </div>\n        <div className=\"options-content\">\n          {shuffleAnswers.map((query, index) => {\n            if (query === correctAnswer) {\n              return (\n                <p\n                  key={ `answer-${index}` }\n                >\n                  <button\n                    type=\"button\"\n                    data-testid=\"correct-answer\"\n                    onClick={ selectAnswer }\n                    className={ gameOn ? 'btn-alternative' : 'btn-alternative-correct' }\n                    disabled={ !gameOn }\n                  >\n                    { parse(query) }\n                  </button>\n                </p>);\n            }\n            return (\n              <p key={ `answer-${index}` }>\n                <button\n                  type=\"button\"\n                  data-testid={ `wrong-answer-${index}` }\n                  onClick={ selectAnswer }\n                  className={ gameOn ? 'btn-alternative' : 'btn-alternative-wrong' }\n                  disabled={ !gameOn }\n                >\n                  { parse(query) }\n                </button>\n              </p>\n            );\n          })}\n        </div>\n      </>\n    );\n  }\n}\n\nQuestions.propTypes = {\n  gameData: shape({\n    question: string,\n    category: string,\n    gameOn: bool,\n    shuffleAnswers: string,\n    correctAnswer: string,\n  }),\n}.isRequired;\n\nexport default Questions;\n","import React, { Component } from 'react';\nimport { arrayOf, object } from 'prop-types';\nimport { connect } from 'react-redux';\nimport { rightAnswer } from '../actions';\nimport '../styles/question.css';\nimport NextQuestion from './Buttons/NextQuestion';\nimport Questions from './Questions';\n\nclass GameOperation extends Component {\n  constructor(props) {\n    super(props);\n\n    this.selectAnswer = this.selectAnswer.bind(this);\n    this.sortQuestions = this.sortQuestions.bind(this);\n    this.runGame = this.runGame.bind(this);\n    this.saveAtLocalStorage = this.saveAtLocalStorage.bind(this);\n    this.timeCounter = this.timeCounter.bind(this);\n    this.nextQuestion = this.nextQuestion.bind(this);\n    this.saveRankAtLocalStorage = this.saveRankAtLocalStorage.bind(this);\n\n    this.state = {\n      question: '',\n      category: '',\n      difficulty: '',\n      count: 0,\n      gameOn: true,\n      shuffleAnswers: [],\n      correctAnswer: '',\n      time: 30,\n      scoreMultiplicators: {\n        hard: 3,\n        medium: 2,\n        easy: 1,\n      },\n    };\n  }\n\n  componentDidMount() {\n    this.sortQuestions();\n    this.runGame();\n  }\n\n  saveRankAtLocalStorage() {\n    const { player } = this.props;\n    const { name, score } = player;\n    const saveNewPlayerRank = {\n      name,\n      score,\n    };\n    const rankingStorage = JSON.parse(localStorage.getItem('ranking') || '[]');\n    rankingStorage.push(saveNewPlayerRank);\n    localStorage.setItem('ranking', JSON.stringify(rankingStorage));\n  }\n\n  runGame() {\n    const oneSecond = 1000;\n\n    this.timer = setInterval(() => {\n      this.setState((prevState) => {\n        if (prevState.time > 0 && prevState.gameOn) {\n          return { time: prevState.time - 1 };\n        }\n\n        clearInterval(this.timer);\n        this.saveAtLocalStorage();\n\n        return { gameOn: false };\n      });\n    }, oneSecond);\n  }\n\n  saveAtLocalStorage() {\n    const { player: redux } = this.props;\n    const player = { ...redux };\n    delete player.picture;\n    localStorage.setItem('state', JSON.stringify({ player }));\n  }\n\n  async selectAnswer({ target }) {\n    this.setState({ gameOn: false });\n    clearInterval(this.timer);\n\n    const { correctAnswer, time, difficulty, scoreMultiplicators } = this.state;\n    const { incrementScore } = this.props;\n    const rightAnswerScore = 10;\n    const score = rightAnswerScore + (time * scoreMultiplicators[difficulty]);\n    if (correctAnswer === target.innerText) {\n      await incrementScore(score);\n    }\n    this.saveAtLocalStorage();\n  }\n\n  sortQuestions() {\n    const { count } = this.state;\n    const { questions } = this.props;\n\n    const {\n      difficulty,\n      question,\n      category,\n      correct_answer: correctAnswer,\n      incorrect_answers: incorrectAnswer } = questions[count];\n\n    const sortValue = 0.5;\n    const shuffleAnswers = [...incorrectAnswer, correctAnswer]\n      .sort(() => Math.random() - sortValue);\n\n    this.setState({ shuffleAnswers, correctAnswer, question, category, difficulty });\n  }\n\n  timeCounter() {\n    const { gameOn, time } = this.state;\n\n    return (\n      <p\n        className={ (time === 0) || (gameOn === false)\n          ? 'timerPaused'\n          : 'timer' }\n      >\n        {time}\n      </p>\n    );\n  }\n\n  async nextQuestion() {\n    const { history, questions } = this.props;\n    await this.setState(({ count }) => ({ count: count + 1, time: 30, gameOn: true }));\n\n    const { count } = this.state;\n\n    if (count >= questions.length) {\n      this.saveRankAtLocalStorage();\n      history.push('/feedback');\n    } else {\n      this.runGame();\n      this.sortQuestions();\n    }\n  }\n\n  render() {\n    const { question, category, gameOn, shuffleAnswers, correctAnswer } = this.state;\n    const gameData = { question, category, gameOn, shuffleAnswers, correctAnswer };\n    return (\n      <div className=\"question-content\">\n        <Questions gameData={ gameData } selectAnswer={ this.selectAnswer } />\n        { this.timeCounter() }\n        <NextQuestion hidden={ gameOn } nextQuestion={ this.nextQuestion } />\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  questions: state.gameData.questions,\n  player: state.player,\n});\n\nconst dispatchStateToProps = (dispatch) => ({\n  incrementScore: (score) => dispatch(rightAnswer(score)),\n});\n\nGameOperation.propTypes = {\n  questions: arrayOf(object),\n}.isRequired;\n\nexport default connect(mapStateToProps, dispatchStateToProps)(GameOperation);\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { object } from 'prop-types';\n\nclass Header extends Component {\n  render() {\n    const { player: { name, score, picture } } = this.props;\n    return (\n      <header className=\"header-content\">\n        <img\n          src={ picture }\n          alt=\"gravatar-img\"\n          data-testid=\"header-profile-picture\"\n        />\n        <div className=\"player-content\">\n          <p data-testid=\"header-player-name\"><strong>{ `Player: ${name}` }</strong></p>\n          <p>\n            Score:\n            <strong>\n              <span data-testid=\"header-score\">{ score }</span>\n            </strong>\n          </p>\n        </div>\n      </header>\n    );\n  }\n}\n\nfunction mapStateToProps(state) {\n  return {\n    player: state.player,\n  };\n}\n\nHeader.propTypes = {\n  player: object,\n}.isRequired;\n\nexport default connect(mapStateToProps)(Header);\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { bool, object } from 'prop-types';\nimport GameOperation from '../components/GameOperation';\nimport { getQuestion } from '../actions';\nimport '../styles/header.css';\nimport Header from '../components/Header';\n\nclass Game extends Component {\n  constructor() {\n    super();\n\n    this.setLocalStorage = this.setLocalStorage.bind(this);\n  }\n\n  componentDidMount() {\n    const { requestQuestions } = this.props;\n    const token = localStorage.getItem('token');\n    requestQuestions(token);\n    this.setLocalStorage();\n  }\n\n  setLocalStorage() {\n    const { player } = this.props;\n    const { name, gravatarEmail, assertions, score } = player;\n    const state = { player: {\n      name,\n      assertions,\n      score,\n      gravatarEmail,\n    } };\n    localStorage.setItem('state', JSON.stringify(state));\n  }\n\n  render() {\n    const { isLoading, history } = this.props;\n    return (\n      <div className=\"main-content\">\n        <Header />\n        <div className=\"question-main-content\">\n          {!isLoading\n            ? <GameOperation history={ history } />\n            : <p className=\"loading\">Carregando....</p> }\n        </div>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  isLoading: state.gameData.isLoading,\n  player: state.player,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  requestQuestions: (token) => dispatch(getQuestion(token)),\n});\n\nGame.propTypes = {\n  isLoading: bool,\n  player: object,\n}.isRequired;\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Game);\n","import React, { Component } from 'react';\nimport { object } from 'prop-types';\n\nclass PlayAgain extends Component {\n  render() {\n    const { history } = this.props;\n    return (\n      <button\n        type=\"button\"\n        data-testid=\"btn-play-again\"\n        className=\"play-again-button\"\n        name=\"login\"\n        onClick={ () => history.push('/') }\n      >\n        <strong>\n          Jogar Novamente\n        </strong>\n      </button>\n    );\n  }\n}\n\nPlayAgain.propTypes = {\n  history: object,\n}.isRequired;\n\nexport default PlayAgain;\n","import React, { Component } from 'react';\nimport { object } from 'prop-types';\n\nclass ShowRank extends Component {\n  render() {\n    const { history } = this.props;\n    return (\n      <button\n        type=\"button\"\n        data-testid=\"btn-ranking\"\n        className=\"show-ranking-button\"\n        name=\"ranking\"\n        onClick={ () => history.push('/ranking') }\n      >\n        <strong>\n          Ver Ranking\n        </strong>\n      </button>\n    );\n  }\n}\n\nShowRank.propTypes = {\n  history: object,\n}.isRequired;\n\nexport default ShowRank;\n","import React, { Component } from 'react';\nimport { number } from 'prop-types';\n\nclass DisplayPerformance extends Component {\n  render() {\n    const { assertions, score } = this.props;\n    const questionsCount = 3;\n    return (\n      <div className=\"results-content\">\n        { assertions >= questionsCount\n          ? <p data-testid=\"feedback-text\"><strong>Mandou bem!</strong></p>\n          : <p data-testid=\"feedback-text\"><strong>Podia ser melhor...</strong></p> }\n        <div className=\"percent-content\">\n          <p>\n            <strong>\n              Você acertou um total de &nbsp;\n              <span data-testid=\"feedback-total-question\">{assertions}</span>\n              &nbsp;\n              { assertions <= 1 ? 'pergunta!' : 'perguntas!' }\n            </strong>\n          </p>\n          <p>\n            <strong>\n              Você obteve &nbsp;\n              <span data-testid=\"feedback-total-score\">{score}</span>\n              &nbsp; pontos!\n            </strong>\n          </p>\n        </div>\n      </div>\n    );\n  }\n}\n\nDisplayPerformance.propTypes = {\n  assertions: number,\n  score: number,\n}.isRequired;\n\nexport default DisplayPerformance;\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { shape, string, number } from 'prop-types';\nimport '../styles/feedBack.css';\nimport Header from '../components/Header';\nimport PlayAgain from '../components/Buttons/PlayAgain';\nimport ShowRank from '../components/Buttons/ShowRank';\nimport DisplayPerformance from '../components/Buttons/DisplayPerformance';\n\nclass FeedBack extends Component {\n  render() {\n    const { history, player: { assertions, score } } = this.props;\n    return (\n      <div className=\"header-feedback\">\n        <Header />\n        <DisplayPerformance assertions={ assertions } score={ score } />\n        <PlayAgain history={ history } />\n        <ShowRank history={ history } />\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  player: state.player,\n});\n\nFeedBack.propTypes = {\n  player: shape({\n    assertions: number,\n    gravatarEmail: string,\n    name: string,\n    score: number,\n  }),\n}.isRequired;\n\nexport default connect(mapStateToProps)(FeedBack);\n","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport '../styles/ranking.css';\n\nclass Ranking extends Component {\n  orderMyArray(playerRank) {\n    playerRank.sort((a, b) => b.score - a.score);\n  }\n\n  render() {\n    const playerRank = JSON.parse(localStorage.getItem('ranking'));\n    this.orderMyArray(playerRank);\n    return (\n      <div className=\"ranking-content\">\n        <h1 data-testid=\"ranking-title\">Meu Ranking</h1>\n        { playerRank.map((player, index) => (\n          <p key={ `player-name-${index}` }>\n            <span data-testid={ `player-name-${index}` }>\n              { player.name }\n            </span>\n            <span> - </span>\n            <span data-testid={ `player-score-${index}` }>\n              { player.score }\n            </span>\n          </p>\n        ))}\n        <Link to=\"/\">\n          <button\n            className=\"play-again-button\"\n            type=\"button\"\n            data-testid=\"btn-go-home\"\n          >\n            Voltar ao início\n          </button>\n        </Link>\n      </div>\n    );\n  }\n}\n\nexport default Ranking;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { BrowserRouter } from 'react-router-dom';\nimport store from './store';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <Provider store={ store }>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </Provider>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React from 'react';\nimport { Switch, Route } from 'react-router';\nimport './App.css';\nimport Login from './pages/Login';\nimport Settings from './pages/Settings';\nimport Game from './pages/Game';\nimport FeedBack from './pages/FeedBack';\nimport Ranking from './pages/Ranking';\n\nexport default function App() {\n  return (\n    <Switch>\n      <Route path=\"/feedback\" component={ FeedBack } />\n      <Route path=\"/ranking\" component={ Ranking } />\n      <Route path=\"/settings\" component={ Settings } />\n      <Route path=\"/game\" component={ Game } />\n      <Route exact path=\"/\" component={ Login } />\n    </Switch>\n  );\n}\n"],"sourceRoot":""}